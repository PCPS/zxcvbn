// Generated by CoffeeScript 1.12.7
var feedback, scoring;

scoring = require('./scoring');

feedback = {
  default_feedback: {
    warning: '',
    suggestions: ['zxcvbn.suggestions.default_0', 'zxcvbn.suggestions.default_1']
  },
  get_feedback: function(score, sequence) {
    var extra_feedback, i, len, longest_match, match, ref;
    if (sequence.length === 0) {
      return this.default_feedback;
    }
    if (score > 2) {
      return {
        warning: '',
        suggestions: []
      };
    }
    longest_match = sequence[0];
    ref = sequence.slice(1);
    for (i = 0, len = ref.length; i < len; i++) {
      match = ref[i];
      if (match.token.length > longest_match.token.length) {
        longest_match = match;
      }
    }
    feedback = this.get_match_feedback(longest_match, sequence.length === 1);
    extra_feedback = 'zxcvbn.suggestions.extra_feedback';
    if (feedback != null) {
      feedback.suggestions.unshift(extra_feedback);
      if (feedback.warning == null) {
        feedback.warning = '';
      }
    } else {
      feedback = {
        warning: '',
        suggestions: [extra_feedback]
      };
    }
    return feedback;
  },
  get_match_feedback: function(match, is_sole_match) {
    var layout, warning;
    switch (match.pattern) {
      case 'dictionary':
        return this.get_dictionary_match_feedback(match, is_sole_match);
      case 'spatial':
        layout = match.graph.toUpperCase();
        warning = match.turns === 1 ? 'zxcvbn.warning.straight_rows' : 'zxcvbn.warning.short_keybord_patterns';
        return {
          warning: warning,
          suggestions: ['zxcvbn.suggestions.longer_keyboard_pattern']
        };
      case 'repeat':
        warning = match.base_token.length === 1 ? 'zxcvbn.warning.repeats_aaa' : 'zxcvbn.warning.repeats_abcabcabc';
        return {
          warning: warning,
          suggestions: ['zxcvbn.suggestions.repeats_words_characters']
        };
      case 'sequence':
        return {
          warning: 'zxcvbn.warning.sequences',
          suggestions: ['zxcvbn.suggestions.sequences']
        };
      case 'regex':
        if (match.regex_name === 'recent_year') {
          return {
            warning: 'zxcvbn.warning.years',
            suggestions: ['zxcvbn.suggestions.years', 'zxcvbn.suggestions.years_associated']
          };
        }
        break;
      case 'date':
        return {
          warning: 'zxcvbn.warning.dates',
          suggestions: ['zxcvbn.suggestions.dates']
        };
    }
  },
  get_dictionary_match_feedback: function(match, is_sole_match) {
    var ref, result, suggestions, warning, word;
    warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'zxcvbn.warning.top_10_password' : match.rank <= 100 ? 'zxcvbn.warning.top_100_password' : 'zxcvbn.warning.common_password' : match.guesses_log10 <= 4 ? 'zxcvbn.warning.similar_common_password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'zxcvbn.warning.sole_word' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'zxcvbn.warning.personal_name_themselves' : 'zxcvbn.warning.personal_name' : '';
    suggestions = [];
    word = match.token;
    if (word.match(scoring.START_UPPER)) {
      suggestions.push('zxcvbn.suggestions.capitalization');
    } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {
      suggestions.push('zxcvbn.suggestions.uppercase');
    }
    if (match.reversed && match.token.length >= 4) {
      suggestions.push('zxcvbn.suggestions.reversed');
    }
    if (match.l33t) {
      suggestions.push('zxcvbn.suggestions.substitutions');
    }
    result = {
      warning: warning,
      suggestions: suggestions
    };
    return result;
  }
};

module.exports = feedback;

//# sourceMappingURL=feedback.js.map
